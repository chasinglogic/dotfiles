#!/usr/bin/env -S uv run --with ujson --script
# vi: ft=python

import fileinput
import ujson as json
from functools import cache


class Colors:
    RESET = "\033[0m"

    RED = "\033[31m"
    YELLOW = "\033[33m"
    CYAN = "\033[36m"

    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"

    @staticmethod
    @cache
    def color_for_level(level: str) -> str:
        match level.upper():
            case "INFO":
                return Colors.CYAN
            case "WARN" | "WARNING":
                return Colors.YELLOW
            case "ERR" | "ERROR":
                return Colors.RED
            case _:
                return Colors.RESET


def print_field_message(data, nesting_level=1, exclude_list=None):
    if exclude_list is None:
        exclude_list = tuple()

    try:
        fields = data.items()
    except (TypeError, AttributeError):
        fields = enumerate(data)

    prefix = "\t" * nesting_level
    for key, value in fields:
        if key in exclude_list:
            continue

        if type(value) is dict and value:
            print(f"{prefix}{key} = {{")
            print_field_message(value, nesting_level=nesting_level + 1)
            print(f"{prefix}}}")
        else:
            print(f"{prefix}{key} = {value}")


TIMESTAMP_KEY = None


def get_timestamp_key(data):
    global TIMESTAMP_KEY

    for key in (
        "time",
        "timestamp",
        "ts",
    ):
        if data.get(key):
            TIMESTAMP_KEY = key
            return

    TIMESTAMP_KEY = ""


LEVEL_KEY = None


def get_level_key(data):
    global LEVEL_KEY

    possible_keys = ("levelname", "level_name", "level", "ts")
    for key in possible_keys:
        if data.get(key):
            LEVEL_KEY = key
            return

    LEVEL_KEY = ""


MESSAGE_KEY = None


def get_message_key(data):
    global MESSAGE_KEY

    possible_keys = ("message", "msg")
    for key in possible_keys:
        if data.get(key):
            MESSAGE_KEY = key
            return

    MESSAGE_KEY = ""


def pretty_print(line):
    data = json.loads(line)
    if TIMESTAMP_KEY is None:
        get_timestamp_key(data)
    if LEVEL_KEY is None:
        get_level_key(data)
    if MESSAGE_KEY is None:
        get_message_key(data)

    timestamp = data.get(TIMESTAMP_KEY, "")
    level = data.get(LEVEL_KEY, "INFO")
    msg = data.get(MESSAGE_KEY, "")
    print(f"{Colors.color_for_level(level)}{level}{Colors.RESET} {timestamp} {msg}")
    print_field_message(
        data,
        exclude_list=(
            MESSAGE_KEY,
            TIMESTAMP_KEY,
            LEVEL_KEY,
        ),
    )


def main():
    for line in fileinput.input():
        try:
            pretty_print(line)
        except json.JSONDecodeError:
            print("NON-JSON LINE:", line)


if __name__ == "__main__":
    main()
