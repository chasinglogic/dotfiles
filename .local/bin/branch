#!/bin/bash

function help() {
    echo "Usage: branch [options] <jira-ticket-id> [<description>...]

When branching from master or stable must use one of the type
indicating flags. Otherwise the new branch name will be derived from
the current branch.

The description can contain spaces but they will be sanitized into "-"
characters.

Examples:
  (from master or stable) branch -b SYS-123 fix model inconsistency in product => bug/SYS-123/fix-model-inconsistency-in-product
  (from bug/SYS-123/fix-model-inconsistency-in-product) branch -b SYS-124 remove inconsistent field from product => bug/SYS-123/SYS-124/remove-inconsistent-field-from-product

Note that when branching from an existing MPB branch the previous
description will be stripped off if present.

Options:
  -y BRANCH_TYPE  Manually set the branch type to BRANCH_TYPE

  -e  Indicates this is for an epic
  -f  Indicates this is feature work
  -t  Indicates this is a task issue type
  -b  Indicates this is a bug issue type
  -r  Indicates this is a release branch

  -d  Do a dry-run (print the name of the branch generated instead of doing the branching)"
    exit 0
}


current_branch=$(git branch | grep "*" | sed 's/\* //')
BRANCH_TYPE=""
DRY_RUN=0

while getopts "dhfetbry:" opt; do
    case "${opt}" in
        h) help ;;
        y) BRANCH_TYPE="${OPTARG}"; shift ;;
        f) BRANCH_TYPE="feature";;
        e) BRANCH_TYPE="epic";;
        t) BRANCH_TYPE="task";;
        b) BRANCH_TYPE="bug";;
        r) BRANCH_TYPE="release";;
        d) DRY_RUN=1 ;;
    esac

    shift
done

if [[ $current_branch == master || $current_branch == stable ]] && [ -z $BRANCH_TYPE ]; then
    echo "Must use a type indicating flag when branching from master. Use -h to see Usage"
    exit 1
fi


jira_ticket="$1"
shift

description="$@"

if [[ $current_branch == master || $current_branch == stable ]]; then
    new_branch_name="$BRANCH_TYPE/$jira_ticket"
else
    current_branch_suffix=$(echo $current_branch | awk -F"/" '{ print $NF }')
    echo $current_branch_suffix
    branch_prefix=""
    # Check if it's a JIRA ticket
    echo "$current_branch_suffix" | grep "^[A-Z]\{3,\}-[0-9]\{1,\}" > /dev/null
    if [[ $? == 0 ]]; then
        branch_prefix=$current_branch
    else
        branch_prefix=$(echo $current_branch | awk 'BEGIN{FS=OFS="/"}{NF--; print}')
    fi

    new_branch_name="$branch_prefix/$jira_ticket"
fi
    
if [ ! -z "$description" ]; then
    sanitized_description=$(echo "$description" | sed 's/ /-/g')
    new_branch_name="$new_branch_name/$sanitized_description"
fi

if [[ $DRY_RUN == 1 ]]; then
    echo $new_branch_name
else
    git checkout -b $new_branch_name $current_branch
fi
